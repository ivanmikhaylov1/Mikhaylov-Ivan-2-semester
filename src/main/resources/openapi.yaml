openapi: 3.0.3
info:
  title: API Documentation
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local server

paths:
  /users:
    post:
      summary: Save User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: "Test User"
                password:
                  type: string
                  default: "testpassword"
      responses:
        "201":
          description: User created
    get:
      summary: Get All Users
      responses:
        "200":
          description: List of users

  /users/{userId}:
    get:
      summary: Get User By Id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            default: "8b9082bf-36ab-4aff-870f-3cbe13573d7f"
      responses:
        "200":
          description: User details

  /users/by-name:
    get:
      summary: Get User By Name
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            default: "Test User"
      responses:
        "200":
          description: User details

  /users/exists:
    get:
      summary: Check If User Exists
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            default: "Test User"
      responses:
        "200":
          description: User exists

  /articles:
    post:
      summary: Save Article
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        "201":
          description: Article created
    get:
      summary: Get Articles
      responses:
        "200":
          description: List of articles

  /articles/user/{userId}/lastRequestTime:
    put:
      summary: Update User Last Request Time
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            default: "8b9082bf-36ab-4aff-870f-3cbe13573d7f"
      responses:
        "200":
          description: Last request time updated
    get:
      summary: Get User Last Request Time
      responses:
        "200":
          description: Last request time

  /articles/user/category:
    post:
      summary: Save Article Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleCategory'
      responses:
        "201":
          description: Category saved

  /websites/basic:
    get:
      summary: Get Basic Websites
      responses:
        "200":
          description: List of websites

  /websites/user/{userId}:
    get:
      summary: Get User Websites
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            default: "8b9082bf-36ab-4aff-870f-3cbe13573d7f"
      responses:
        "200":
          description: User's websites
    post:
      summary: Add User Website
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWebsiteRequest'
      responses:
        "201":
          description: Website added
    delete:
      summary: Delete Website By Name
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            default: "Test Website"
      responses:
        "200":
          description: Website deleted

  /websites/exists:
    get:
      summary: Check If Website Exists By Name
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            default: "Test Website"
      responses:
        "200":
          description: Website exists

  /catalogs/basic:
    get:
      summary: Get Basic Catalogs
      responses:
        "200":
          description: List of catalogs

  /catalogs/user/{userId}:
    get:
      summary: Get User Catalogs
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            default: "8b9082bf-36ab-4aff-870f-3cbe13573d7f"
      responses:
        "200":
          description: User's catalogs

  /catalogs/exists:
    get:
      summary: Check If Catalog Exists By Name
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            default: "Test Catalog"
      responses:
        "200":
          description: Catalog exists

  /catalogs/name:
    get:
      summary: Get Catalog By Name
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
            default: "8b9082bf-36ab-4aff-870f-3cbe13573d7f"
        - name: name
          in: query
          required: true
          schema:
            type: string
            default: "Test Catalog"
      responses:
        "200":
          description: Catalog details

  /catalogs/delete:
    delete:
      summary: Delete Catalog By Name
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
            default: "8b9082bf-36ab-4aff-870f-3cbe13573d7f"
        - name: name
          in: query
          required: true
          schema:
            type: string
            default: "Test Catalog"
      responses:
        "200":
          description: Catalog deleted

  /catalogs/addToUser:
    put:
      summary: Add Catalog To User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                  default: "8b9082bf-36ab-4aff-870f-3cbe13573d7f"
                name:
                  type: string
                  default: "Test Catalog"
      responses:
        "201":
          description: Catalog added to user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'

components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: string
          format: uuid
          default: "e5501240-65f1-11e9-bf1f-33b019c20472"
        name:
          type: string
          default: "Test Article"
        description:
          type: string
          default: "This is a test article."
        date:
          type: string
          format: date
          default: "2025-02-10"
        link:
          type: string
          format: uri
          default: "http://example.com"

    ArticleCategory:
      type: object
      properties:
        articleId:
          type: string
          format: uuid
          default: "e5501240-65f1-11e9-bf1f-33b019c20472"
        catalogId:
          type: string
          format: uuid
          default: "valid-catalog-id"
        websiteId:
          type: string
          format: uuid
          default: "valid-website-id"

    AddWebsiteRequest:
      type: object
      properties:
        name:
          type: string
          default: "Test Website"
        url:
          type: string
          format: uri
          default: "https://www.example.com"

    Catalog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          default: "Test Catalog"
